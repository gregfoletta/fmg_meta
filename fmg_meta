#!/usr/bin/env perl

use strict;
use warnings;
use 5.010;
use Pod::Usage;
use Getopt::Long;
use Term::ANSIColor;
use Carp;
use Mojo::UserAgent;
use JSON::PP;


my %args;
GetOptions(
    \%args,
    'fmg=s',
    'username=s',
    'password=s',
    'insecure|k',
    'help' => sub { pod2usage(1) }
) or pod2usage(2);

=pod

=encoding UTF-8

=head1 NAME

fmg_meta - register and assign meta fields and meta variables on a FortManager

=head1 VERSION

version .1 (BETA)

=head1 SYNOPSIS

    # Register the definitions and assignments against an FMG 
    ./fmg_meta --fmg https://fmg.i.foletta.xyz meta.json

    # Insecure if the certificate is not trusted
    ./fmg_meta --insecure --fmg https://fmg.i.foletta.xyz meta.json

    # API user/pass can be specified as ENV vars
    export FMG_API_USER=api_user
    export FMG_API_PASS=c0mpl3xp4ssw0rd
    ./fmg_meta --fmg https://fmg.i.foletta.xyz meta.json

    # Or on the command line (--username and --password work as well)
    ./fmg_meta --u api_user -p c0mpl3xp4ssw0rd --fmg https://fmg.i.foletta.xyz meta.json

=head1 OPTIONS

=over

=item -f|--fmg I<uri> - the URI of the FortiManager API

=item -u|--username I<user> - the FortiManager API username

=item -p|--password I<pass> - the FortiManager API password

=item -k|--insecure - don't verify certificate 

=item -h|--help - print usage information

=back

=head1 BETA NOTES

Please note that this script is currently in beta. Two main things to take into account:

=over

=item The schema of the JSON file you use to define/apply the meta fields/variables may change at any time.

=item It only supports defining and assigning meta fields, not meta variables (which are new in 7.2).

=back

=head1 REQUIREMENTS

You'll need the following modules, preferably installed using the more modern L<cpanminus|https://metacpan.org/pod/App::cpanminus>:

    sh$ cpanm Mojo::UserAgent

or the old CPAN client:

    sh$ cpan Mojo::UserAgent

=head1 JSON DEFINITION

A an example C<meta.json> file has been included in this repository.

=head1 AUTHENTICATION

Once you have defined you API user on the FortiManager, the script will search for the credentials in three places:

=over 

=item In $HOME/.ftnt/fmg_api formatted as <username>:<password>

=over

=item  Lines beginning with '#' are skipped

=back

=item In the environment variabes C<FMG_API_USER> and C<FMG_API_PASS>

=item In the command line arguments C<-u|--username> and C<-p|--password>.

=back

If the credentials are available in multiple places, local dotfile beats environment variable beats commandline.

=cut


### Log Helpers###

sub log_output {
    print STDERR colored('- ', 'bold green');
    say STDERR join ' ', @_;
}

sub log_error {
    say STDERR colored('- '.join(' ', @_), 'bold red');
    exit(1);
}

sub log_warning {
    say STDERR colored('- '.join(' ', @_), 'bold yellow');
}

log_error "No --fmg specified" unless $args{fmg};

# JSON file is the last argument
my $json_file = shift or log_error "No JSON file specififed";
my $metavar_json = get_metavar_json($json_file);

log_output "Retreived metavars from JSON file $json_file";

# Try to get the credentials from the dotfiles in the $HOME/.ftnt dir
my %dotfile_creds = dotfile_creds();

log_output "Authenticating to FortiManager";

# Get our API access token
my $api_json_res = fmg_api_call(
    fmg => $args{fmg},
    method => 'exec',
    insecure => $args{insecure},
    url => '/sys/login/user',
    data => {
        user => $dotfile_creds{username} // $args{username} // $ENV{FMG_API_USER},
        passwd  => $dotfile_creds{password} // $args{password} // $ENV{FMG_API_PASS},
    }
);

my $session_token = $api_json_res->{session} or log_error "No session token received";

log_output "Creating metavars";
# Create the metavars
create_metavars($metavar_json);
create_device_metavars($metavar_json);


sub get_metavar_json {
    my ($json_file) = @_;
    my $json;

    open(my $fh, "<:encoding(UTF-8)", $json_file) or croak "Could not open JSON file '$json_file'";

    {
        local $/;
        $json = <$fh>;
        close $fh;
    }

    return decode_json($json);
}

sub create_metavars {
    my ($metavars) = @_;

    my @metavar_keys = qw( importance length name status );

    if (!defined $metavars->{meta_fields}) {
        log_warning "No 'meta_fields' object in JSON";
        return;
    }

    METAVAR:
    for my $metavar (@{ $metavars->{meta_fields} }) {
        # First some checks and setting defaults
        if (!defined $metavar->{name}) {
            log_warning "Metvar missing 'name' parameter, skipping";
            next METAVAR;
        }
        log_warning "$metavar->{name} has no length, skipping" unless $metavar->{length};
        $metavar->{importance} //= "required";
        $metavar->{status} //= "enable";

        log_output "Creating metavar $metavar->{name}";
        fmg_api_call(
            fmg => $args{fmg},
            method => 'set',
            session => $session_token,
            insecure => $args{insecure},
            url => '/dvmdb/_meta_fields/device',
            data => [{
                map { $_ => $metavar->{$_} } @metavar_keys
            }]
        );
    }
}

sub create_device_metavars {
    my ($metavars) = @_;
    my $res;

    if (!defined $metavars->{meta_field_assignment}) {
        log_warning "No 'device_metavars' object in the JSON";
        return;
    }

    for my $dev_metavar (@{ $metavars->{meta_field_assignment} }) {
        log_output "Creating metavar device mappings for device $dev_metavar->{device}";

        # Perform some checks on the fields
        for my $field (keys %{ $dev_metavar->{meta_fields} }) {
            # Remove fields that don't exist
            if (!grep { $_->{name} eq $field } @{ $metavars->{meta_fields} }) {
                log_warning "Metavar '$field' does not exist, removing";
                delete $dev_metavar->{meta_fields}{ $field };
            }

            # Remove fields that are disabled
            my ($var_definition) = grep { $field eq $_->{name} } @{ $metavars->{meta_fields} };
            if ($var_definition->{status} eq "disable") {
                log_warning "Metavar '$field' is disabled, removing";
                delete $dev_metavar->{meta_fields}{ $field };
            }
        }

        $res = fmg_api_call(
            fmg => $args{fmg},
            method => 'set',
            session => $session_token,
            insecure => $args{insecure},
            url => '/dvmdb/device/'.$dev_metavar->{device},
            data => {
                "meta fields" => $dev_metavar->{meta_fields}
            }
        );
    }
}

sub dotfile_creds {
    my $cred_path = File::Spec->canonpath( "$ENV{HOME}/.ftnt/fmg_api" );
    my %creds;

    open(my $fh, "<:encoding(UTF-8)", $cred_path) or return ();

    while (my $line = <$fh>) {
        next if $line =~ m{^\s*#};

        chomp $line;

        @creds{qw(username password)} = split ':', $line;

        return %creds;
    }

    return ();
}

sub fmg_api_call {
    my (%a) = @_;

    # Mandatory arguments
    croak "No 'fmg' host/IP address specified" unless $args{fmg};

    #Set our defaults
    $a{method} //= 'get';
    $a{insecure} //= 0;
    $a{session} //= '';
    $a{id} //= 1;

    my $ua = Mojo::UserAgent->new;
    $ua->insecure($args{insecure});

    my $res = $ua->post(
        $a{fmg} => json => {
            id => $a{id},
            session => $a{session},
            method => $a{method},
            params => [{
                url => $a{url},
                data => defined $a{data} ? $a{data} : {}
            }]
        }
    )->result;

    if ($res->is_error) {
        my $msg;
        if (defined $res->json->{oauth}) {
            $msg = join '/', values %{$res->json->{oauth}};
        } elsif (defined $res->json->{error_message}) {
            $msg = $res->json->{error_message};
        } elsif (defined $res->json->{error_description}) {
            $msg = $res->json->{error_description};
        } else {
            $msg = "Unknown Error";
        }

        log_error("API Error ". $msg);
    }

    if (defined $res->{error}) {
        croak "Could not complete API call: ". $res->{error_description};
    }

    return $res->json;
}
